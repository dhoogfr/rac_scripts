#!/bin/bash

### This script sets the oracle environment variables, based upon the settings in the /etc/oratab file and the configuration in the Grid Infrastructure.
### It can be used on every (linux) setup where the GI is installed (rac, rac one node, oracle restart).
### To use it you source the script and pass it the db unique name of the database for which you want the env variables to be set (. godb <db_unique_name>)
###
### It should not be used to setup the env variables for the GI infrastructure itself.
### Use the gogrid script for this instead
###
###
### This script extends the oraenv script from Oracle (which it uses internally) by allowing you to pass the db unique name (which oracle sets in the /etc/oratab file),
### while it also sets the ORACLE_SID to the actual instance name (instead of the db unique name)
### This makes it especially usefull for Oracle RAC and Oracle RAC One Node, but it also can be used in Oracle Restart environments or for single instance databases on RAC environments
###
###
### The environment variable set are:
###   - ORA_DBNAME:       Oracle database name
###   - ORACLE_UNQNAME:   The oracle db unique name
###   - ORACLE_SID:       The oracle instance name on this node
###   - ORACLE_BASE:      The oracle db base directory for the given db
###   - ORACLE_HOME:      The oracle home directory for the given db
###   - PATH:             Removes the existing $ORACLE_HOME/bin from the PATH and adds the new $ORACLE_HOME/bin to it

### location of the oraenv script, normally in /usr/local/bin, but can differ
_ORAENV=/usr/local/bin/oraenv

### Use the db unique name given as argument
if [ $# -ne 1 ]
then
  echo "usage: godb <db_unique_name>"
  ### don't use exit as the script is sourced and exit would kill the current shell
  return 1
else

  ORAENV_ASK=NO
  ORACLE_SID=$1
  
  ### call oraenv to set the environment
  . ${_ORAENV} -s
  
  eval `srvctl config database -d ${ORACLE_SID} |
          awk -F':' '
            function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
            function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
            function trim(s) { return rtrim(ltrim(s)); }
            /Database name:/ {
              $2=trim($2);
              print "ORA_DBNAME="$2" ;"
            }
            /Database instance:/ {
              $2=trim($2);
              print "ORA_INSTANCE="$2" ;"
            }
            /Type:/ {
              $2=trim($2);
              print "ORA_TYPE="$2" ;"
            }
          '
       `
  ### The db name is not mandatory in the GI config if it does not differ from the unique name
  ### So, when it is empty, set it to the ORACLE_SID (which is at this point still holding the passed db (unique) name)
  if [ "${ORA_DBNAME}" == "" ]
  then
    ORA_DBNAME=${ORACLE_SID}
  fi
  
  ### ORACLE_SID currently contains the unique name (as needed for the oraenv script), not the instance name, so tranfer it to the ORACLE_UNQNAME
  ORACLE_UNQNAME=${ORACLE_SID}
  
  ### Test for the type of db (rac, rac one or single instance)
  if [ "${ORA_TYPE}" == "SINGLE" ] || [ "${ORA_TYPE}" == "" ]
  then
    ### single instance, either on rac or oracle restart, set the ORACLE_SID to the retrieved ORA_INSTANCE variable
    ORACLE_SID=${ORA_INSTANCE}
  elif [ "${ORA_TYPE}" == "RAC" ] || [ "${ORA_TYPE}" == "RACOneNode" ]
  then
    ### Oracle rac or rac OneNode
    ### store the db unique name in the ORACLE_UNQNAME variable and the database name in ORA_DBNAME
    ORACLE_SID=`srvctl status database -d ${ORACLE_SID} | grep \`hostname -s\` | cut -d' ' -f2`
  fi
  
  ### unset some temporary variables
  unset ORAENV_ASK
  unset ORA_INSTANCE
  unset ORA_TYPE
  unset _ORAENV
  
  ### export the set oracle variables
  export ORACLE_UNQNAME ORA_DBNAME ORACLE_SID
fi
