#!/bin/bash

### This script sets the oracle environment variables, based upon the settings in the /etc/oratab file and the configuration in the Grid Infrastructure.
### It can be used on every (linux) setup where the GI is installed (rac, rac one node, oracle restart).
### To use it you source the script and pass it the db unique name of the database for which you want the env variables to be set (. godb <db_unique_name>)
### The script expects the oraenv script to be in the /usr/local/bin directory and the oratab file in /etc/. If not change the _ORAENV and _ORATAB variable in the beginning of the script
###
### It should not be used to setup the env variables for the GI infrastructure itself.
### Use the gogrid script for this instead
###
###
### This script extends the oraenv script from Oracle (which it uses internally) by allowing you to pass the db unique name (which oracle sets in the /etc/oratab file),
### while it also sets the ORACLE_SID to the actual instance name (instead of the db unique name)
### This makes it especially usefull for Oracle RAC and Oracle RAC One Node, but it also can be used in Oracle Restart environments or for single instance databases on RAC environments
###
###
### The environment variable set are:
###   - ORA_DBNAME:       Oracle database name
###   - ORACLE_UNQNAME:   The oracle db unique name
###   - ORACLE_SID:       The oracle instance name on this node
###   - ORACLE_BASE:      The oracle db base directory for the given db
###   - ORACLE_HOME:      The oracle home directory for the given db
###   - PATH:             Removes the existing $ORACLE_HOME/bin from the PATH and adds the new $ORACLE_HOME/bin to it

### location of the oraenv script, normally in /usr/local/bin, but can differ
_ORAENV=/usr/local/bin/oraenv

### location of the oratab, normally in /etc, but can differ
_ORATAB=/var/opt/oracle/oratab

rval=0

### abuse a while loop to avoid a complicated if then construct when testing for errors, as exit can not be used in a sourced script (would kill the current shell)
while true
do

  ### Use the db unique name given as argument
  if [ $# -ne 1 ]
  then
    echo "usage: godb <db_unique_name>"
    rval=1
    break
  fi

  ### set ORACLE_SID to the passed argument
  ORACLE_SID=$1
 
  ### test if oraenv exists and is executable
  if [[ ! -x "${_ORAENV}" ]]
  then
    echo "oraenv script: ${_ORAENV} does not exist or is not executable by you"
    rval=1
    break
  fi

  ### test if the passed variable exists in the oratab file, to limit the chance that oraenv will prompt for input
  if [[ ! -r "${_ORATAB}" ]]
  then
    echo "oratab file: ${_ORATAB}  does not exists or is not readable by you"
    rval=1
    break
  fi
  DB_CNT=$(egrep "^${ORACLE_SID}:" ${_ORATAB} |wc -l)
  if [ ${DB_CNT} -ne 1 ]
  then
    echo "passed db unique name was not found in the ${_ORATAB} file or found more than once"
    rval=1
    break
  fi

  ### execute the oraenv script
  ORAENV_ASK=NO
  . ${_ORAENV} -s

  ### test if srvctl exists and is executable
  if  [[ ! -x "${ORACLE_HOME}/bin/srvctl" ]]
  then
    echo "srvctl could not be found or is not executable by you"
    rval=1
    break
  fi

  ### run srvctl and parse the output for the unique name, the db name, the instance name and the type
  ### instance name will only be filled in when this is an single instance on RAC or Oracle Restart
  ### db name can be null if the db name is not different from the db unique name
  eval `srvctl config database -d ${ORACLE_SID} |
          gawk -F':' '
            function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
            function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
            function trim(s) { return rtrim(ltrim(s)); }
            /Database unique name:/ {
              $2=trim($2);
              print "ORACLE_UNQNAME="$2" ;"
            }
            /Database name:/ {
              $2=trim($2);
              print "ORA_DBNAME="$2" ;"
            }
            /Database instance:/ {
              $2=trim($2);
              print "ORA_INSTANCE="$2" ;"
            }
            /Type:/ {
              $2=trim($2);
              print "ORA_TYPE="$2" ;"
            }
          '
       `

  ### the ORACLE_UNQNAME should always be filled in, if not, something went wrong in the srvctl command or in the parsing
  if [ "${ORACLE_UNQNAME}" == "" ]
  then
    echo "Something went wrong in executing srvctl, or the output was not parsed correctly"
    rval=1
    break
  fi

  ### The db name is not mandatory in the GI config if it does not differ from the unique name
  ### So, when it is empty, set it to the ORACLE_UNQNAME
  if [ "${ORA_DBNAME}" == "" ]
  then
    ORA_DBNAME=${ORACLE_UNQNAME}
  fi
    
  ### Test for the type of db (rac, rac one or single instance)
  if [ "${ORA_TYPE}" == "SINGLE" ] || [ "${ORA_TYPE}" == "" ]
  then
    ### single instance, either on rac or oracle restart, set the ORACLE_SID to the retrieved ORA_INSTANCE variable
    ORACLE_SID=${ORA_INSTANCE}
  elif [ "${ORA_TYPE}" == "RAC" ] || [ "${ORA_TYPE}" == "RACOneNode" ]
  then
    ### Oracle rac or rac OneNode
    ### store the db unique name in the ORACLE_UNQNAME variable and the database name in ORA_DBNAME
    ORACLE_SID=`srvctl status database -d ${ORACLE_SID} | grep \`hostname \` | cut -d' ' -f2`
  else
    ### unknown GI type, don't know what to do
    echo "Type: ${ORA_TYPE} is unknown to this script and it does not know what to do now"
    rval=1
    break
  fi

  ### check if ORACLE_SID has been filled in
  if [ "${ORACLE_SID}" == "" ]
  then
    echo "ORACLE_SID has no value, something went wrong during parsing"
    rval=1
    break
  fi
  
  ### export the set oracle variables
  export ORACLE_UNQNAME ORA_DBNAME ORACLE_SID

  break

done

### unset some temporary variables
unset ORAENV_ASK
unset ORA_INSTANCE
unset ORA_TYPE
unset _ORAENV
unset DB_CNT
unset _ORATAB

### return rval
return ${rval}
