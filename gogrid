#!/bin/bash

### This script sets the oracle environment variables for the grid infrastructure, based upon the settings in the /etc/oratab file and the configuration in the Grid Infrastructure.
### It can be used on every (linux) setup where the GI is installed (rac, rac one node, oracle restart).
### To use it you source the script and optionally pass +ASM or -MGMTDB to set the environments for grid infrastructure and the ASM or the MGMTDB instances. If no parameter is given, +ASM is assumed.
### The script expects the oraenv script to be in the /usr/local/bin directory and the oratab file in /etc/. If not change the _ORAENV and _ORATAB variable in the beginning of the script
###
### It should not be used to setup the env variables for intances outside the GI home (so other then +ASM or -MGMTDB).
### Use the godb script for this instead
###
###
### The environment variable set are:
###   - ORA_DBNAME:       Oracle database name (not when +ASM is specified and ASM is not used)
###   - ORACLE_UNQNAME:   The oracle db unique name (not when +ASM is specified and ASM is not used)
###   - ORACLE_SID:       The oracle instance name on this node (not when +ASM is specified and ASM is not used)
###   - ORACLE_BASE:      The oracle db base directory for the given db
###   - ORACLE_HOME:      The oracle home directory for the given db
###   - PATH:             Removes the existing $ORACLE_HOME/bin from the PATH and adds the new $ORACLE_HOME/bin to it

### location of the oraenv script, normally in /usr/local/bin, but can differ
_ORAENV=/usr/local/bin/oraenv

### location of the oratab, normally in /etc, but can differ
_ORATAB=/etc/oratab

### location of the local registry
_OLRLOC=/etc/oracle/olr.loc

rval=0

### abuse a while loop to avoid a complicated if then construct when testing for errors, as exit can not be used in a sourced script (would kill the current shell)
while true
do

  ### check the passed db_target
  if [ "$1" == "" ]
  then
    ### no target given, assume ASM
    db_target="+ASM"
  else
    ### check if target is valid
    if [ $1 == "+ASM" ] || [ $1 == "-MGMTDB" ]
    then
      db_target=$1
    else
      rval=1
      echo "usage gogrid [target]"
      echo "where optional target is either +ASM or -MGMTDB"
      echo "if no target is given, +ASM is assumed"
      break
    fi
  fi

  ### general part to set the clusterware home, path and ld_library_path
  OLDHOME=${ORACLE_HOME}
  ORACLE_HOME=`awk -F'=' '/^crs_home=/ {print $2}' ${_OLRLOC}`
  export ORACLE_HOME
  unset ORA_DBNAME
  unset ORACLE_UNQNAME
      
  ### the following was nicked from the oraenv script and resets the LD_LIBRARY_PATH and PATH variables
      
  ###Reset LD_LIBRARY_PATH
  case ${LD_LIBRARY_PATH:-""} in
      *$OLDHOME/lib*)     LD_LIBRARY_PATH=`echo $LD_LIBRARY_PATH | \
                              sed "s;$OLDHOME/lib;$ORACLE_HOME/lib;g"` ;;
      *$ORACLE_HOME/lib*) ;;
      "")                 LD_LIBRARY_PATH=$ORACLE_HOME/lib ;;
      *)                  LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH ;;
  esac
  export LD_LIBRARY_PATH

  case "$OLDHOME" in
    "") OLDHOME=$PATH ;;        #This makes it so that null OLDHOME can't match
  esac                            #anything in next case statement

  case "$PATH" in
    *$OLDHOME/bin*)     PATH=`echo $PATH | \
                              sed "s;$OLDHOME/bin;$ORACLE_HOME/bin;g"` ;;
    *$ORACLE_HOME/bin*) ;;
    *:)                 PATH=${PATH}$ORACLE_HOME/bin: ;;
    "")                 PATH=$ORACLE_HOME/bin ;;
    *)                  PATH=$PATH:$ORACLE_HOME/bin ;;
  esac
  export PATH 

  ### set the ORACLE_BASE (unset it first otherwise the orabase utility will just return the current value)
  unset ORACLE_BASE
  ORACLE_BASE=`$ORACLE_HOME/bin/orabase`
  export ORACLE_BASE

  if [ ${db_target} == "+ASM" ]
  then
    ### check if there is an ASM instance running on this node
    ORACLE_SID=$(${ORACLE_HOME}/bin/srvctl status asm -detail | grep "on node $(hostname --short)" | cut -d' ' -f3)
    if [ "${ORACLE_SID}" == "" ]
    then
      ### no ASM instance found running on this host, either clusterware without ASM or only ASM proxy running here
      unset ORACLE_SID
    else
      ORA_DBNAME=+ASM
      ORACLE_UNQNAME=${ORA_DBNAME}
      export ORA_DBNAME ORACLE_UNQNAME ORACLE_SID
    fi
  else
    ### if not +ASM, then it must be -MGMTDB
    ### must get first a system with mgmtdb to test with
    ORACLE_SID=$(${ORACLE_HOME}/bin/srvctl status mgmtdb | grep "on node $(hostname --short)" | cut -d' ' -f2)
    if [ "${ORACLE_SID}" == "" ]
    then
      ### either mgmtdb is not configured or not active on this node
      unset ORACLE_SID
      echo "Either there is no MGMTDB configured or the instance is currently not running on this node"
      rval=2
    else
      ORA_DBNAME=ORACLE_SID
      ORACLE_UNQNAME=${ORA_DBNAME}
      export ORA_DBNAME ORACLE_UNQNAME ORACLE_SID
    fi    
  fi

  ### all went ok, break out of the loop
  break

done

### Cleanup
unset db_target

### return rval
return ${rval}
